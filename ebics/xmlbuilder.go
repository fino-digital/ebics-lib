package ebics

import (
	"fmt"
	"strconv"
	"time"

	"github.com/beevik/etree"
	"github.com/fino-digital/ebics-lib/model"
)

// BuildXMLFile creates a xml file for a sepa transfer
func BuildSEPAXMLFile(sepa model.SEPA) ([]byte, error) {
	nbOfTxs := len(sepa.Debitors)

	ctrlSum := 0.0
	for _, debitor := range sepa.Debitors {
		ctrlSum += debitor.Amount
	}

	doc := etree.NewDocument()
	doc.CreateProcInst("xml", `version="1.0" encoding="UTF-8"`)

	document := doc.CreateElement("Document")
	document.CreateAttr("xmlns", "urn:iso:std:iso:20022:tech:xsd:pain.008.001.02")
	document.CreateAttr("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
	document.CreateAttr("xsi:schemaLocation", "urn:iso:std:iso:20022:tech:xsd:pain.008.001.02 pain.008.001.02.xsd")

	CustomerDirectDebitInitiation := document.CreateElement("CstmrDrctDbtInitn")

	// build groupheader
	groupHeader := CustomerDirectDebitInitiation.CreateElement("GrpHdr") // [1..1]
	groupHeader.CreateElement("MsgId").SetText(sepa.MsgID)               // Point-to-point reference of the instructing party for the next party in the message chain to uniquely identify the message (file). [1..1]
	t := time.Now()
	groupHeader.CreateElement("CreDtTm").SetText(fmt.Sprintf("%d-%02d-%02dT%02d:%02d:%02d",
		t.Year(), t.Month(), t.Day(),
		t.Hour(), t.Minute(), t.Second())) // Date and time when the payment message was generated by the instructing party. [1..1]
	groupHeader.CreateElement("NbOfTxs").SetText(strconv.Itoa(nbOfTxs))              // Number of individual transactions within the entire message. [1..1]
	groupHeader.CreateElement("CtrlSum").SetText(fmt.Sprintf("%.2f", ctrlSum))       // Sum of the amounts of all individual transactions in the entire message. [1..1]
	groupHeader.CreateElement("InitgPty").CreateElement("Nm").SetText(sepa.InitgPty) // Name of the payee or a party acting on behalf of the payee. [1..1]

	// build payment information
	paymentInformation := CustomerDirectDebitInitiation.CreateElement("PmtInf")       // [0..n]
	paymentInformation.CreateElement("PmtInfId").SetText(sepa.PaymentInfoID)          // Reference to uniquely identify the following collector. [1..1]
	paymentInformation.CreateElement("PmtMtd").SetText("DD")                          // Payment instrument, here debit. [1..1]
	paymentInformation.CreateElement("BtchBookg").SetText("true")                     // Indicator that states whether it is a collective entry (true) or a single entry (false). [0..1]
	paymentInformation.CreateElement("NbOfTxs").SetText(strconv.Itoa(nbOfTxs))        // Number of individual transactions within the entire message. [1..1]
	paymentInformation.CreateElement("CtrlSum").SetText(fmt.Sprintf("%.2f", ctrlSum)) // Sum of the amounts of all individual transactions in the entire message. [1..1]

	// add payment typ information
	paymentTypInformation := paymentInformation.CreateElement("PmtTpInf")
	paymentTypInformation.CreateElement("SvcLvl").CreateElement("Cd").SetText("SEPA")
	paymentTypInformation.CreateElement("LclInstrm").CreateElement("Cd").SetText("CORE")
	paymentTypInformation.CreateElement("SeqTp").SetText("OOFF")

	paymentInformation.CreateElement("ReqdColltnDt").SetText(sepa.RequestedCollectionDate) // Customer's desired due date of the direct debit. [0..1]

	// add payee (creditor) of the original transaction
	creditor := paymentInformation.CreateElement("Cdtr")     // [1..1]
	creditor.CreateElement("Nm").SetText(sepa.Creditor.Name) // [1..1]

	if sepa.Creditor.PostalAddress != nil {
		postalAddressCreditor := creditor.CreateElement("PstlAdr")                               // [0..1]
		postalAddressCreditor.CreateElement("Ctry").SetText(sepa.Creditor.PostalAddress.Country) // [0..1]
		for _, al := range sepa.Creditor.PostalAddress.AddressLine {
			postalAddressCreditor.CreateElement("AdrLine").SetText(al) // [0..2]
		}
	}

	creditorAccount := paymentInformation.CreateElement("CdtrAcct") // Payee's bank account. [1..1]
	creditorAccount.CreateElement("Id").CreateElement("IBAN").SetText(sepa.Creditor.IBAN)
	creditorAccount.CreateElement("Ccy").SetText(sepa.Creditor.Currency)

	if len(sepa.Creditor.BIC) > 0 {
		paymentInformation.CreateElement("CdtrAgt").CreateElement("FinInstnId").CreateElement("BIC").SetText(sepa.Creditor.BIC) // [0..1]
	}

	// ChargeBearer
	paymentInformation.CreateElement("ChrgBr").SetText("SLEV") // Calculation of the fee. Code which means that certain rules apply. [0..1]

	// ???
	otherIdentification := paymentInformation.CreateElement("Id").CreateElement("PrvtId").CreateElement("Othr")
	otherIdentification.CreateElement("Id").SetText(sepa.Creditor.CreditorID)           // [1..1]
	otherIdentification.CreateElement("SchmeNm").CreateElement("Prtry").SetText("SEPA") // [1..1]

	for _, debitor := range sepa.Debitors {
		directDebitTransactionInformation := paymentInformation.CreateElement("DrctDbtTxInf") // [1..n]

		paymentIdentification := directDebitTransactionInformation.CreateElement("PmtId") // [1..1]
		if len(debitor.InstructionsID) > 0 {
			paymentIdentification.CreateElement("InstrId").SetText(debitor.InstructionsID) // Unique reference of the direct debit recipient to his bank (point-to-point reference) [0..1]
		}
		paymentIdentification.CreateElement("EndToEndId").SetText(debitor.EndToEndID) // This reference is passed unchanged through the entire chain to the payer (end-to-end reference)  [1..1]

		instructedAmount := directDebitTransactionInformation.CreateElement("InstdAmt") // [1..1]
		instructedAmount.CreateAttr("Ccy", debitor.Currency)
		instructedAmount.SetText(fmt.Sprintf("%.2f", debitor.Amount))

		// Details of the direct debit mandate
		mandateRelatedInformation := directDebitTransactionInformation.CreateElement("DrctDbtTx").CreateElement("MndtRltdInf") // [1..1]
		mandateRelatedInformation.CreateElement("MndtId").SetText(debitor.MandateID)                                           // Unique mandate reference. [1..1]
		mandateRelatedInformation.CreateElement("DtOfSgntr").SetText(debitor.DateOfSign)                                       // Date on which the mandate was signed. [1..1]
		mandateRelatedInformation.CreateElement("AmdmntInd").SetText("false")                                                  // Indicates whether the mandate has been changed or not. [0..1]

		// Bank of the payer (debtor)
		if len(debitor.BIC) > 0 {
			directDebitTransactionInformation.CreateElement("DbtrAgt").CreateElement("FinInstnId").CreateElement("BIC").SetText(debitor.BIC)
		}

		// Name of the debtor
		directDebitTransactionInformation.CreateElement("Dbtr").CreateElement("Nm").SetText(debitor.Name) // [1..1]

		// IBAN of the debtor
		directDebitTransactionInformation.CreateElement("DbtrAcct").CreateElement("Id").CreateElement("IBAN").SetText(debitor.IBAN) // [1..1]

		// Payee information [0..1]
		directDebitTransactionInformation.CreateElement("RmtInf").CreateElement("Ustrd").SetText(debitor.Purpose) // [1..1]
	}

	doc.Indent(2)
	return doc.WriteToBytes()
}
